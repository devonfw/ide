:toc:
toc::[]

= settings

The `devonfw-ide` requires `settings` with configuration templates for the arbitrary tools.

To get an initial set of these settings we provide the default https://github.com/devonfw/ide-settings[ide-settings] as an initial package. These are also released so you can download the latest stable or any history version at http://search.maven.org/#search|ga|1|a%3A%22devonfw-ide-settings%22[maven central].

To test `devonfw-ide` or for very small projects you can also use these the latest default settings (just hit return when link:setup.asciidoc[setup] is asking for the `Settings URL`).
However, for collaborative projects we strongly encourage you to distribute and maintain the settings via a dedicated and project specific `git` repository.
This gives you the freedom to control and manage the tools with their versions and configurations during the project lifecycle.
Therefore simply follow the link:usage.asciidoc#admin[admin usage guide].

== Structure
The settings folder (see `link:variables.asciidoc[SETTINGS_PATH]`) has to follow this file structure:

.File structure of settings
[subs=+macros]
----
/settings
├──/ https://github.com/devonfw/ide-settings/tree/master/devon[devon]
│  ├──/ https://github.com/devonfw/ide-settings/tree/master/devon/conf[conf]
│  │  ├──/ https://github.com/devonfw/ide-settings/tree/master/devon/conf/.m2[.m2]
│  │  │  └── https://github.com/devonfw/ide-settings/blob/master/devon/.m2/settings.xml[settings.xml]
│  │  ├──/ https://github.com/devonfw/ide-settings/tree/master/devon/conf/npm[npm]
│  │  │  └── https://github.com/devonfw/ide-settings/blob/master/devon/conf/npm/.npmrc[.npmrc]
│  │  └── https://github.com/devonfw/ide-settings/blob/master/devon/conf/devon.properties[devon.properties]
├──/ https://github.com/devonfw/ide-settings/tree/master/eclipse[eclipse]
│  ├──/ https://github.com/devonfw/ide-settings/tree/master/eclipse/workspace[workspace]
│  │  ├──/ https://github.com/devonfw/ide-settings/tree/master/eclipse/workspace/setup[setup]
│  │  └──/ https://github.com/devonfw/ide-settings/tree/master/eclipse/workspace/update[update]
│  ├── https://github.com/devonfw/ide-settings/blob/master/eclipse/lifecycle-mapping-metadata.xml[lifecycle-mapping-metadata.xml]
│  └── https://github.com/devonfw/ide-settings/blob/master/eclipse/project.dictionary[project.dictionary]
├──/ ...
├──/ https://github.com/devonfw/ide-settings/tree/master/sonarqube[sonarqube]
│  └──/ https://github.com/devonfw/ide-settings/tree/master/sonarqube/profiles[profiles]
│     ├── Devon-C#.xml
│     ├── ...
│     └── Devon-XML.xml
├──/ https://github.com/devonfw/ide-settings/tree/master/vscode[vscode]
│  └──/ https://github.com/devonfw/ide-settings/tree/master/vscode/workspace[workspace]
│     ├──/ https://github.com/devonfw/ide-settings/tree/master/vscode/workspace/setup[setup]
│     └──/ https://github.com/devonfw/ide-settings/tree/master/vscode/workspace/update[update]
└── https://github.com/devonfw/ide-settings/blob/master/devon.properties[devon.properties]
----

As you can see, the `settings` folder contains sub-folders for tools of the IDE.
So the `devon` folder contains `devon.properties` files for the link:configuration.asciidoc[configuration] of your environment.
Further, for the IDEs such as link:eclipse.asciidoc[eclipse] or link:vscode.asciidoc[vscode], the according folders contain the templates to manage the workspace via our link:configurator.asciidoc[configurator].

== Configuration Philosophy
Different tools and configuration files require a different handling:

* Where suitable, we directly use these configurations from your `settings` (e.g. for `eclipse/lifecycle-mapping-metadata.xml`, or `eclipse/project.dictionary`).
* The `devon` folder in `settings` contains templates for configuration files. There are copied to the `devonfw-ide` installation during link:setup.asciidoc[setup] (if no such file already exists). In this way the `settings` repository can provide reasonable defaults but allows the user to take over control and customize to his personal needs (e.g. `.m2/settings.xml`).
* Other configurations need to be imported manually. To avoid manual steps and simplify use we try to automate as much as possible. This currently applies to `sonarqube` profiles but will be automated with https://github.com/devonfw/sonar-devon4j-plugin[sonar-devon4j-plugin] in the future.
* For tools with complex configuration structures like link:eclipse.asciidoc[eclipse], link:intellij..asciidoc[intellij], or link:vscode.asciidoc[vscode] we provide a smart mechanism via our link:configurator.asciidoc[configurator].

== Customize Settings
You can easily customize these settings for the requirements of your project. We suggest that one team member is responsible to ensure that everything stays consistent and works.

You may also create new sub-folders in `settings` and put individual items according to your needs. E.g. you could add scripts for https://addons.mozilla.org/de/firefox/addon/greasemonkey[greasemonkey] or https://chrome.google.com/webstore/detail/tampermonkey[tampermonkey], as well as scripts for your database or whatever may be useful and worth to share in your team. However, to share and maintain knowledge we recommend to use a wiki.
