:toc:
toc::[]

= eclipse

The eclipse commandlet allows to install, configure, and launch the https://eclipse.org/[Eclipse IDE].
To launch eclipse for your current workspace and devonfw-ide installation simply run:
`devon eclipse`

You may also supply additional arguments as `devon eclipse «args»`. These are explained by the following table:

.Usage of `devon eclipse`
[options="header"]
|=======================
|*Argument(s)*   |*Meaning*
|`--all`                  |if provided as first arg then to command will be invoked for each workspace
|`setup`                  |setup Eclipse (install or update)
|`add-plugin «id» [«url»]`|install an additional plugin
|`run`                    |launch Eclipse (default if no argument is given)
|`start`                  |same as `run`
|`ws-up[date]`            |update workspace
|`ws-re[verse]`           |reverse merge changes from workspace into settings
|`ws-reverse-add`         |reverse merge adding new properties
|`create-script`          |create launch script for this IDE, your current workspace and your OS
|=======================

There are variables that can be used for Eclipse. These are explained by the following table:

.Variables of devonfw-ide for Eclipse
[options="header"]
|=======================
|*Variable*|*Default-Value*|*Meaning*
|*`ECLIPSE_VERSION`*|`2020-12`|The version of the tool Eclipse to install and use.
|*`ECLIPSE_EDITION_TYPE`*|Java|The edition of the tool Eclipse to install and use. You can choose between Java for standard edition or JEE for enterprise edition.
|=======================

== plugins
To be productive with Eclipse you need plugins. Of course `devonfw-ide` can automate this for your:
In your link:settings.asciidoc[settings] git repository create a folder https://github.com/devonfw/ide-settings/tree/master/eclipse/plugins[eclipse/plugins] (click on this link to see more examples and see which plugins come by default).
Here you can create a properties file for each plugin. This is an example https://github.com/devonfw/ide-settings/blob/master/eclipse/plugins/tmterminal.properties[tmterminal.properties]:
```
plugin_url=http://download.eclipse.org/tm/terminal/marketplace
plugin_id=org.eclipse.tm.terminal.feature.feature.group,org.eclipse.tm.terminal.view.feature.feature.group,org.eclipse.tm.terminal.control.feature.feature.group,org.eclipse.tm.terminal.connector.ssh.feature.feature.group,org.eclipse.tm.terminal.connector.telnet.feature.feature.group
plugin_active=true
```

The variables are defined as follows:

* `plugin_url` defines the URL of the Eclipse update site of the plugin
* `plugin_id` defines the feature group ID(s) to install. To install multiple features/plugins provide a coma-separated list of IDs. If you want to customize `devonfw-ide` with new plugins you can first install them manually and then go to `About Eclipse > Installation Details` then you can filter for your newly installed plugin and find the values in the `Id` column. Copy & paste them from here to make up your own custom config.
* `plugin_active` is an optional parameter. If it is `true` (default) the plugin will be installed automatically during the project link:setup.asciidoc[setup] for all developers in your team. Otherwise, developers can still install the plugin manually via `devon eclipse add-plugin «plugin-name»` from the config file `settings/eclipse/plugins/«plugin-name».properties`. See the `settings/eclipse/plugins` folder for possible values of «plugin-name».

In general you should try to stick with the configuration pre-defined by your project. But some plugins may be considered as personal flavor and are typically not predefined by the project config. This e.g. applies for devstyle that allows a real dark mode for eclipse and tunes the theming and layout of Eclipse in general. Such plugins should be shipped with your link:settings.asciidoc[settings] as described above with `plugin_active=false` allowing you to easily install it manually.

As the maintainer of the link:settings.asciidoc[settings] for your project you should avoid to ship too many plugins that may waste resources but are not used by every developer. By configuring additional plugins with `plugin_active=false` you can give your developers the freedom to install some additional plugins easily.

=== legacy plugin config
For downward compatibility we still support the deprecated legacy configuration if the folder `settings/eclipse/plugins` does not exist:
The project link:configuration.asciidoc[configuration] typically defines the plugins that will be installed via `ECLIPSE_PLUGINS` link:variables.asciidoc[variable]. Otherwise defaults from this `eclipse` link:cli.asciidoc#commandlets[commandlet] will apply.
Be aware that this comes at your own risk and sometimes plugins can conflict and break your IDE.

Here is an example how a project can configure the plugins in its `devon.properties` inside the link:settings.asciidoc[settings]:
```
ECLIPSE_PLUGINS=("AnyEditTools.feature.group" "https://raw.githubusercontent.com/iloveeclipse/plugins/latest/" "com.ess.regexutil.feature.group" "http://regex-util.sourceforge.net/update/")
```
For the above listed plugins you can also use the short form:
```
ECLIPSE_PLUGINS=("anyedit" "" "regexutil" "")
```
Of course you may also mix plugin IDs with fully qualified plugins.

== dictionary

Eclipse already comes with a build-in spellchecker. This is very helpful when writing comments. The default settings of `devonfw-ide` ship with a project specific https://github.com/devonfw/ide-settings/blob/master/eclipse/project.dictionary[dictionary file] and according configurations to enable spellchecking and configuring this dictionary.
When typing JavaDoc, inline comments or other texts the spellchecker will underline unknown words in red.
If your cursor is located at such a word you can hit `[Ctrl][1]` to get a context menu with additional options.
There you can either choose similar correct words to correct a typo or you may even add the word (maybe a new business term) to your local dictionary.

image::images/eclipse-spellcheck.png["Eclipse spellchecker”]

In the latter case, you should commit the changes to your link:settings.asciidoc[settings] so that it will be available to your entire team.
For further details about committing changes to the settings please consult the link:usage.asciidoc#admin[admin usage].

=== non-english dictionary

In case your project has to write documentation or text in languages other than English, you might want to prefill your project dictionary for that language.
Here we collect a list of such dictionaries that you can download and merge into your project dictionary:

* German: https://sourceforge.net/projects/germandict/ (has to be converted to UTF-8 e.g. with link:advanced-tooling-windows.asciidoc#real-text-editor[Notepad++] via `Encoding > Convert to UTF-8`)
