#!/usr/bin/env bash

# autocompletion list
if [ "${1}" = "shortlist" ]
then
  if [ -z "${2}" ]
  then
    echo "setup help version pip pip3 version -v --version"
  fi
  exit
fi

if [ -n "${DEVON_IDE_TRACE}" ]; then set -vx; fi
# shellcheck source=scripts/functions
source "$(dirname "${0}")"/../functions


function doSetup() {
  if [ ! -d "${PYTHON_HOME}" ] || [ "${1}" != "silent" ]
  then
    # Get leatest release
    if [ -z "${PYTHON_VERSION}" ]
    then
      doDebug "Python Home: ${PYTHON_HOME}"
      doEcho "Getting latest release..."
      # curl returns content of page, grep returns only version numbers, sort is sorting by version numbers and removing duplicates
      # tail and head are returning the penultimate line, since it contains the latest stable version
      PYTHON_VERSION=$(curl -L https://www.python.org/ftp/python 2>&1 | grep -o '3\.[0-9]*\.[0-9]*' | sort -u -V | tail -n2 | head -n1)
	  fi

    if doIsMacOs
    then
      doInstall "-" "${PYTHON_HOME}" "python" "${PYTHON_VERSION}" "" "Python"
      sh "${PYTHON_HOME}"/configure --enable-optimizations --with-ensurepip=install --prefix="${PYTHON_HOME}"
      make -j 8
      make altinstall
      
    elif doIsWindows
    then
      doEcho "Getting pip install file"
      # https://github.com/pypa/get-pip
      curl -sSL https://bootstrap.pypa.io/get-pip.py -o get-pip.py
      doInstall "-" "${PYTHON_HOME}" "python" "${PYTHON_VERSION}" "" "python"
      doRunPython "get-pip.py"
      rm get-pip.py
      if [ -a "$(find "${PYTHON_HOME}" -name '*._pth')" ]
      then
        PTH_FILE="$(find "${PYTHON_HOME}" -name '*._pth')"
        doEcho "Freeing Python from embedded Mode..."
        sed -i -e 's/#import site/import site/g' "${PTH_FILE}"
      else
        doEcho "Error. Couldn't find _pth file."
      fi
    else
      # install build prerequisites      
      pckmngers=("apt-get" "yum" "zypp")

      for t in "${pckmngers[@]}"
      do
        command -v "${t}" > /dev/null
        if [ "${?}" -eq "0" ]
        then
          pckmnger=${t}
        fi
      done
      
      case ${pckmnger} in
        apt-get) doEcho "installing required dependencies..."
                 doRunCommand "sudo ${pckmnger} install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev";;
        yum)     doEcho "installing required dependencies..."
                 doRunCommand "sudo ${pckmnger} -y groupinstall \"Development Tools\""
                 doRunCommand "sudo ${pckmnger} -y install gcc openssl-devel bzip2-devel libffi-devel";;
        zypp)    doEcho "installing required dependencies..."
                 doRunCommand "sudo ${pckmnger} install automake fdupes gcc gcc-c++ gcc-fortran gdbm-devel gettext-tools gmp-devel intltool libbz2-devel libexpat-devel libffi-devel libnsl-devel lzma-devel make ncurses-devel netcfg openssl-devel pkgconfig readline-devel sqlite-devel xz zlib-devel";;
        *)       doEcho "Sorry, your package manager is not supported."
                 exit;;
      esac

      doInstall "-" "${PYTHON_HOME}" "python" "${PYTHON_VERSION}" "" "Python"
      "${PYTHON_HOME}"/configure --enable-optimizations --with-ensurepip=install --prefix="${PYTHON_HOME}"
      make -j 8
      make altinstall
    fi
    # rename folder from bin to Scripts
    if [ -d "${PYTHON_HOME}/bin" ]
    then
      mv "${PYTHON_HOME}"/bin "${PYTHON_HOME}"/Scripts
    fi
  fi

  if [ "${1}" != "silent" ] && ! doIsQuiet
  then
    doRunPython "--version"
  fi 
  
  setPath

}

function setPath() {
  py_dir="${PYTHON_SCRIPTS}"
  path_bind="PATH=\$PATH:"
  set_path="${path_bind}${py_dir}"
  if ! grep -q "${set_path}" "${DEVON_IDE_HOME}/conf/devon.properties"
    then
      doRunCommand "${set_path}"
      echo -e "\n${set_path}" >> "${DEVON_IDE_HOME}/conf/devon.properties"
      doEcho "Python and pip path is added to ${DEVON_IDE_HOME}/conf/devon.properties"
  fi
}

function doRunPython() {
  doSetup silent
  doEcho "Running: python ${*}"
  if doIsQuiet
  then
    "${PYTHON_BIN}" "${@}" > /dev/null
  else
    "${PYTHON_BIN}" "${@}"
  fi
}

function doRunPip() {
  doSetup silent
  if [ "${1}" = "pip" ]
  then
    doEcho "Running: ${*}"
    if doIsQuiet
    then
      "${PIP_BIN}" "${2}" "${3}" > /dev/null
    else
      doRunPython "${PIP_BIN}" "${2}" "${3}"
    fi
  elif [ "${1}" = "pip3" ] && doIsWindows
  then
    doEcho "Running: pip3 ${*}"
    if doIsQuiet
    then
      "${PIP3_BIN}" "${2}" "${3}" > /dev/null
    else
      doRunPython "${PIP3_BIN}" "${2}" "${3}"
   fi

  fi
}

PYTHON_HOME="${DEVON_IDE_HOME}/software/python"
PYTHON_SCRIPTS="${PYTHON_HOME}/Scripts"

#in linux and mac, filenames might change their version numbers
if ! doIsWindows
then
  PYTHON_BIN=$(find "${PYTHON_SCRIPTS}" -name "python3.*" | sort | head -1)
  PIP_BIN=$(find "${PYTHON_SCRIPTS}" -name "pip*" | sort | head -1)
else
  PYTHON_BIN="${PYTHON_HOME}/python.exe"
  PIP_BIN="${PYTHON_SCRIPTS}/pip.exe"
  PIP3_BIN="${PYTHON_SCRIPTS}/pip3.exe"
fi

# CLI
case ${1} in 
  "help" | "-h")
    echo "Install Python."
    echo
    echo "Arguments:"
    echo " setup                    setup Python."
    echo " version                  get Python version."
    echo " pip                      call pip."
    echo " pip3                     call pip3 (Windows only)."
    echo
  ;;
  "setup" | "s" | "")
    doEcho "Installating python..."
    doSetup
  ;;
  "version" | "-v" | "--version")
     doRunPython --version
  ;;
  "pip" | "pip3")
      doRunPip "${@}"
  ;;
  *)
      doRunPython "${@}"
  ;;
esac
