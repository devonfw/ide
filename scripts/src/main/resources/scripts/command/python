#!/usr/bin/env bash

# autocompletion list
if [ "${1}" = "shortlist" ]
then
  if [ -z "${2}" ]
  then
    echo "setup version help"
  fi
  exit
fi

# shellcheck source=scripts/functions
source "$(dirname "${0}")"/../functions
PYTHON_HOME="${DEVON_IDE_HOME}/software/python"
TOOL_VERSION_COMMAND="python --version"
# shellcheck source=scripts/commandlet-cli
source "$(dirname "${0}")"/../commandlet-cli

function doSetup() {
  TOOL_VERSION_COMMAND="-"
  doInstall "python" "${PYTHON_VERSION}" "${1}"
  TOOL_VERSION_COMMAND="python --version"
  if [ "${?}" = 0 ]
  then
    if doIsMacOs
    then
      doBrewInstall openssl
      sh "${PYTHON_HOME}"/configure MACOSX_DEPLOYMENT_TARGET=12 --enable-optimizations --with-ensurepip=install --with-openssl=/opt/homebrew/opt/openssl@3 --prefix="${PYTHON_HOME}"
      make -j 8
      make altinstall
      make clean
      make distclean
      
    elif doIsWindows
    then
      if [ -a "$(find "${PYTHON_HOME}" -name '*._pth')" ]
      then
        PTH_FILE="$(find "${PYTHON_HOME}" -name '*._pth')"
        doEcho "Freeing Python from embedded Mode..."
        sed -i -e 's/#import site/import site/g' "${PTH_FILE}"
      else
        doWarning "Couldn't find *._pth file."
      fi
    else
      doInstallWithPackageManager "apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev" \
                                  "yum -y groupinstall \"Development Tools\"" \
                                  "zypp install automake fdupes gcc gcc-c++ gcc-fortran gdbm-devel gettext-tools gmp-devel intltool libbz2-devel libexpat-devel libffi-devel libnsl-devel lzma-devel make ncurses-devel netcfg openssl-devel pkgconfig readline-devel sqlite-devel xz zlib-devel"
      "${PYTHON_HOME}"/configure --enable-optimizations --with-ensurepip=install --prefix="${PYTHON_HOME}"
      make -j 8
      make altinstall
      make clean
      make distclean
    fi
  fi
}

function doRunPython() {
  doSetup silent
  if doIsQuiet
  then
    doRunCommand "python ${*}" > /dev/null
  else
    doRunCommand "python ${*}"
  fi
}

case ${1} in 
  "help" | "-h")
    echo "Install Python."
    echo
    echo "Arguments:"
    echo " setup                          setup Python."
    echo " «args»                         call Python with the specified arguments."
  ;;
  "setup" | "s" | "")
    doSetup "${2}"
  ;;
  "version")
     doRunPython --version
  ;;
  *)
     doRunPython "${@}"
  ;;
esac
