#!/usr/bin/env bash

# autocompletion list
if [ "${1}" = "shortlist" ]
then
  allOptions="ws-update ws-reverse ws-reverse-add create-script"
  if [ -z "${2}" ]
  then
    echo "--all setup version add-plugin run start ${allOptions} import help"
  elif [ "${2}" = "--all" ]
  then
    echo "${allOptions}"
  fi
  exit
fi

# shellcheck source=scripts/functions
source "$(dirname "${0}")"/../functions
ECLIPSE_HOME="${DEVON_IDE_HOME}/software/eclipse"
ECLIPSE="${ECLIPSE_HOME}/eclipse"
if doIsWindows
then
  ECLIPSE="${ECLIPSE_HOME}/eclipsec"
fi
ECLIPSE_PRODUCT="${ECLIPSE_HOME}/.eclipseproduct"
if doIsMacOs
then
  ECLIPSE_PRODUCT="${DEVON_IDE_HOME}/software/macos/eclipse/Eclipse.app/Contents/Eclipse/.eclipseproduct"
fi
TOOL_VERSION_COMMAND="cat '${ECLIPSE_PRODUCT}'"
# shellcheck source=scripts/commandlet-cli
source "$(dirname "${0}")"/../commandlet-cli
ECLIPSE_JAVA_HOME="${JAVA_HOME}"
if [ -n "${EXTRA_JAVA_VERSION}" ]
then
  ECLIPSE_JAVA_HOME="${DEVON_IDE_HOME}/software/extra/java"
fi

L_PWD=$(pwd)
cd "${DEVON_IDE_HOME}" || exit 255

function doCreateProperties() {
  #The function creates a properties file at the given path and with the given name,
  #but if a plugin name is not provided, it will use the pluginId value as the file name.
  local properties_path="${DEVON_IDE_HOME}/settings/eclipse/plugins"
  local plugin_id="${1}"
  local plugin_url="${2}"
  local plugin_name="${3}"
  local plugin_status="${4}"
  doSuccess "Creating properties file for plugin ${plugin_name}  id : ${plugin_id} at ${properties_path}..."
  if [ -z "${plugin_status}" ]
  then
    plugin_status="false"
  fi
  local properties_file="${properties_path}/${plugin_name}.properties"
  if [ -z "${plugin_name}" ]
  then
    plugin_name="${plugin_id}"
    properties_file="${properties_path}/${plugin_id}.properties"
  fi
  if [ -f "${properties_file}" ]
  then
    return
  fi
  echo -e "plugin_url=${plugin_url}\nplugin_id=${plugin_id}\nplugin_active=${plugin_status}" >>"${properties_file}"
}


function doInstallEclipsePlugin() {
  local plugin_id="${1}"
  local plugin_url="${2}" #Update site
  local plugin_name="${3:-$plugin_id}"
  
  echo "Installing Eclipse plugin '${plugin_name}' from URL ${plugin_url}..."

  local pluginDependencies
  pluginDependencies=$(doCheckPluginsInstalled "${plugin_id}")
  local debugInfo
  debugInfo=$(doInvokeEclipse org.eclipse.equinox.p2.director -repository "${plugin_url}" -installIU "${plugin_id}")
  if [ "${debugInfo}" != "" ] && doCheckSuccessOfPluginInstall "${debugInfo}" "${plugin_name}" "${plugin_url}" "${pluginDependencies}"
  then
    return 0
  fi
  return 1
}

function doCheckSuccessOfPluginInstall(){
  local debug_info="${1}"
  local pluginName="${2}"
  local plugin_url="${3}"
  local plugin_dependencies="${4}"
  if grep -q "Overall install request is satisfiable" <(echo "$debug_info")
  then
    return 0
  elif grep -q "Unable to load repositories" <(echo "$debug_info") || grep -q "No repository found at" <(echo "$debug_info")
    then
    doError "Installation of plugin '${pluginName}' from $plugin_url failed:\n${debug_info}"
    return 1
  else
    doError "Installation of plugin '${pluginName}' from $plugin_url failed:\n${debug_info}"
    if [ -n "${plugin_dependencies}" ]
    then
      plugin_dependencies=$(echo -e "${plugin_dependencies}" | sort -u)
      doWarning "Plugin '${pluginName}' might be already installed, because of existing dependencies: ${plugin_dependencies}\nMake sure the plugin is not installed yet by checking the list of installed plugins in the Eclipse IDE. If there's an error and the issue persists, try to remove the plugin manually from the plugins folder or uninstall it with devon remove-plugin command."
    fi
    return 1
  fi
}
  

# Check if the plugins are already installed by looking at the eclipse/plugins folder
# $1: plugin feature group ID
# return: dependencies that are already installed
function doCheckPluginsInstalled() {
  local plugin_directory="${DEVON_IDE_HOME}/software/eclipse/plugins"
  local plugin_custom_directory="${DEVON_IDE_HOME}/plugins/eclipse/plugins"

  # Remove feature.group from each plugin id
  local plugins="${1//.feature.group/}"
  # Remove spaces from plugin variable
  plugins="${1// /}"
  # Iterate each plugin via comma seperation
  IFS=',' read -ra plugins_arr <<<"${plugins}"
  for plugin in "${plugins_arr[@]}"
  do
    # Remove feature from plugin variable
    plugin=${plugin/\.feature*/}

    local plugin_dependencies
    plugin_dependencies=$(ls -1 "${plugin_directory}"/*"${plugin}".* "${plugin_custom_directory}"/*"${plugin}".* 2>/dev/null)
    # Remove last word after dot
    while [[ "${plugin}" == *.* ]]; do
      if [ "${plugin}" == "org.eclipse" ] || [ "${plugin}" == "org.apache" ] || [ "${plugin}" == "com" ] || [ "${plugin}" == "org" ] || [ "${plugin}" == "net" ]
      then
        break
      fi
      local new_plugin_dependencies
      new_plugin_dependencies=$(ls -1 "${plugin_directory}"/*"${plugin}".* "${plugin_custom_directory}"/*"${plugin}".* 2>/dev/null)
      if [ -n "${new_plugin_dependencies}" ]
      then
        plugin_dependencies="${plugin_dependencies}\n${new_plugin_dependencies}"
      fi
      plugin=${plugin%.*}
    done
  done
  # Remove plugin_directory from plugin variable
  plugin_dependencies=$(echo -e "${plugin_dependencies}" | sed "s|${plugin_directory}/||g" | sed "s|${plugin_custom_directory}/||g")
  echo -e "${plugin_dependencies}" | sort -u
}

# Remove plugins from Eclipse by feature group ID
function doRemovePlugin() {
  local rm_plugin_id="${1}"
  if [ -z "${rm_plugin_id}" ]
  then
    doError "No plugin was specified for removal."
    return 1
  fi
  doLoadPluginProperties "${rm_plugin_id}" # Sets global variables: plugin_id, plugin_url, plugin_name, plugin_status
  if [ -z "${plugin_id}" ] 
  then
    if [[ "${rm_plugin_id}" == *.* ]] # If rm_plugin_id contains a dot, it is probably a feature group ID
    then
      plugin_id="${rm_plugin_id}"
    else
      doError "Plugin ${rm_plugin_id} is not installed.\nMake sure you provided the correct plugin.properties name or plugin id."
      return 1
    fi
  fi
  doEcho "Removing plugin ${plugin_id}..."
  
  local debugInfo
  debugInfo=$(doInvokeEclipse org.eclipse.equinox.p2.director -uninstallIU "${plugin_id}")
  
  if [ "${debugInfo}" != "" ] && doCheckRemovalOfPluginDependencies "${debugInfo}" "${plugin_id}"
  then
    doSuccess "Plugin ${plugin_id} removed successfully."
  fi
}

# Launches Eclipse with the given arguments and returns the debug info or empty String if the invocation failed.
function doInvokeEclipse() {
  local application="$1"
  shift
  local eclipse_args=("$@")
  local debug_info
  debug_info=$(doStartEclipse log -application "${application}" "${eclipse_args[@]}" | grep '^!MESSAGE' | sed 's/^!MESSAGE //')
  local exit_code=$?
  if [ $exit_code -ne 0 ];
  then
    doError "Failed to invoke Eclipse with arguments: ${eclipse_args[*]}"
    echo ""
    return 1
  else
    echo "$debug_info"
    return 0
  fi
}

function doCheckRemovalOfPluginDependencies(){
  local debug_info="$1"
  local plugin_id="$2"
  local plugin_dependencies
  plugin_dependencies=$(doCheckPluginsInstalled "${plugin_id}")
  plugin_id="${plugin_id// /}"
  IFS=',' read -ra plugin_id_arr <<<"${plugin_id}"
  if [[ ${#plugin_id_arr[@]} -eq 0 ]]
  then
    doError "Plugin ${plugin_id} couldn't be removed from your Eclipse installation as it was not found. "
    return 1
  fi
  for plugin in "${plugin_id_arr[@]}"; do
    # If debug info contains words The installable unit could not be found, then the plugin was not uninstalled correctly
      if grep -q "The installable unit ${plugin} has not been found." <(echo "$debug_info");
      then
        doError "Plugin ${plugin} couldn't be removed from your Eclipse installation as it was not found. Please check if the plugin exists and try to remove it manually."
        if [ -n "${plugin_dependencies}" ]
        then
          doWarning "If the problem persists, try removing the following dependencies: ${plugin_dependencies}"
        fi
        return 1
    fi
  done
  return 0
}

function doSetup() {
  local silent="${1}"
  doDevonCommand java setup silent
  # check version
  local javaVersion="${EXTRA_JAVA_VERSION}"
  if [ -z "${javaVersion}" ]
  then
    javaVersion="${JAVA_VERSION}"
  fi
  if [ -n "${javaVersion}" ]
  then
    doVersionCompare "${javaVersion}" "11u0"
    if [ "${?}" == 2 ]
    then
      # Java version is lower than 11
      local requireJava11="no"
      if [ -z "${ECLIPSE_VERSION}" ]
      then
        requireJava11="yes"
      else
        doVersionCompare "${ECLIPSE_VERSION}" "2020-09"
        if [ "${?}" != 2 ]
        then
          # Eclipse version is >= 2020-09
          requireJava11="yes"
        fi
      fi
      if [ "${requireJava11}" = "yes" ]
      then
        doConfirmWarning "You are using eclipse version ${ECLIPSE_VERSION:-latest} that requires Java 11 or newer.\nHowever, [EXTRA_]JAVA_VERSION is ${javaVersion} - in this setup eclipse can not work.\nPlease update JAVA_VERSION, set EXTRA_JAVA_VERSION or downgrade ECLIPSE_VERSION in your settings/devon.properties!"
      fi
    fi
  fi
  doInstall "eclipse" "${ECLIPSE_VERSION}" "${silent}" "${ECLIPSE_EDITION_TYPE:-java}"
  if [ "${?}" = 0 ]
  then
    doAddPlugins
  fi
}

# $1: plugin config properties file
function doAddPluginFromConfig() {
  local plugin_properties_file="${1}"
  local optional_plugin_active="${2}"
  local url=""
  if [ -f "${plugin_properties_file}" ]
  then
    doLoadPluginProperties "${plugin_properties_file}"
    if [ -n "${plugin_mirror_url}" ]
    then
      url="${plugin_mirror_url}"
    else
      url="${plugin_url}"
    fi
    if [ -n "${plugin_id}" ] && [ -n "${url}" ] && [ "$plugin_active" = "true" ] || [ "${optional_plugin_active}" = "true" ] 
    then
      if doInstallEclipsePlugin "${plugin_id}" "${url}" "$(basename "${plugin_properties_file%.*}")"
      then
        doSuccess "Plugin ${plugin_id} installed successfully."
      fi
    fi
  else 
    doError "Plugin ${plugin_properties_file} was not found.\nMake sure you provided the correct plugin.properties name."
  fi

}

function doAddPlugins() {
  if [ -d "${SETTINGS_PATH}"/eclipse/plugins ]
  then
    local file
    for file in "${SETTINGS_PATH}"/eclipse/plugins/*.properties; do
      doAddPluginFromConfig "${file}"
    done
  else
    doWarning "Legacy eclipse plugin mechanism detected. Please migrate to ${SETTINGS_PATH}/eclipse/plugins:\nhttps://github.com/devonfw/ide/blob/master/documentation/eclipse.asciidoc"
    if [ -z "${ECLIPSE_PLUGINS}" ]
    then
      doAddPlugin startexplorer
      doAddPlugin regexutil
      doAddPlugin templatevariables
      doAddPlugin spotbugs
      doAddPlugin checkstyle
      doAddPlugin cobigen
      doAddPlugin terminal
    else
      for ((i = 0; i < ${#ECLIPSE_PLUGINS[*]}; i = i + 2)); do
        doAddPlugin "${ECLIPSE_PLUGINS[${i}]}" "${ECLIPSE_PLUGINS[((${i} + 1))]}"
      done
    fi
  fi
}

function doConfigureEclipse() {
  local mode="${1}"
  if [ ! -d "${WORKSPACE_PATH}/.metadata" ]
  then
    if [ -z "${mode}" ]
    then
      mode="-u"
    elif [ "${mode}" != "-u" ]
    then
      doFail "Workspace ${WORKSPACE} is not initialized.\nReverse merge is not possible."
    fi
  fi
  if [ -n "${mode}" ]
  then
    doConfigureWorkspace "${SETTINGS_PATH}/eclipse/workspace" "${WORKSPACE_PATH}" "${mode}"
  fi
}

function doAddPlugin() {
  local plugin_id="${1}"
  local plugin_url="${2}"
  local plugin_name="${3}" #optional. If specified, the plugin will be installed with a properties file with the name that is specified.
  if [ -z "${plugin_url}" ] 
  then
    doAddPluginFromConfig "${SETTINGS_PATH}/eclipse/plugins/${plugin_id}.properties" "true"
    if [ ! "${?}" = 0 ]
    then
      doError "There was an error during the installation. Please try to call add-plugin again with parameters: «id» [«url»] «plugin name»[optional]."
    fi
  else
    if doInstallEclipsePlugin "${plugin_id}" "${plugin_url}" "${plugin_name}"
    then
      if [ -n "${plugin_name}" ]
      then
        doCreateProperties "${plugin_id}" "${plugin_url}" "${plugin_name}"
      fi
      doSuccess "Plugin ${plugin_id} installed successfully."
    fi
  fi
}

function doLaunchEclipse() {
  doConfigureEclipse -u
  echo "launching Eclipse in workspace ${WORKSPACE} at ${WORKSPACE_PATH}"
  doStartEclipse gui -showlocation "${WORKSPACE}"
}

# $1: start eclipse in gui or log mode
# $@: further parameters 
function doStartEclipse() {
  local start_mode="${1}"
  shift
  local eclipse_args=("$@")
  local configuration_path="${DEVON_IDE_HOME}/plugins/eclipse/configuration/"
  mkdir -p "${configuration_path}"
  local default_arguments="${ECLIPSE} -clean -data ${WORKSPACE_PATH} -keyring ~/.eclipse/.keyring -configuration ${configuration_path}"
  if [ "${start_mode}" = "gui" ]
  then
    if doIsWindows
    then
      # shellcheck disable=SC2086
      start "eclipse" /B ${default_arguments} -vm "${ECLIPSE_JAVA_HOME}/bin/javaw" "${eclipse_args[@]}" -vmargs "${ECLIPSE_VMARGS}"
    else
      # shellcheck disable=SC2086
      ${default_arguments} -vm "${ECLIPSE_JAVA_HOME}/bin/java" "${eclipse_args[@]}" -vmargs "${ECLIPSE_VMARGS}"
    fi
  elif [ "${start_mode}" = "log" ]
    then
      "${ECLIPSE}" -consoleLog -nosplash -configuration "${configuration_path}" -vm "${ECLIPSE_JAVA_HOME}/bin/java" "${eclipse_args[@]}" -vmargs "${ECLIPSE_VMARGS}"
  else
    doFail "Please specify how you want to start eclipse, either in gui or log mode"
  fi
}

function doCheckAndInstallGroovy() {
  local groovy_version=3.0.1
  if [ ! -f "${M2_REPO}/org/codehaus/groovy/groovy-ant/${groovy_version}/groovy-ant-${groovy_version}.jar" ] || [ ! -f "${M2_REPO}/org/codehaus/groovy/groovy/${groovy_version}/groovy-${groovy_version}.jar" ]
  then
    echo "Groovy not found. Installing version ${groovy_version} in Maven repository ${M2_REPO}..."
    doRunCommand "mvn org.apache.maven.plugins:maven-dependency-plugin:2.10:get -Dartifact=org.codehaus.groovy:groovy-ant:${groovy_version}:jar -DremoteRepositories=https://mvnrepository.com"
  fi
}

function doImportEclipse() {
  if [ -z "${1}" ]
  then
    doFail "Parameter \"path\" is missing."
  fi
  doConfigureEclipse
  doCheckAndInstallGroovy
  if [[ "${1}" = /* ]]
  then
    local import_path="${1}"
  else
    # Path is relative make it absolute
    import_path="${L_PWD}/${1}"
  fi
  importWorkingSets="${2}"
  echo "Starting eclipse import for ${import_path} into workspace ${WORKSPACE} at ${WORKSPACE_PATH}"
  ECLIPSE_VMARGS="${ECLIPSE_VMARGS} -DdevonImportPath=\"${import_path}\" -DdevonImportWorkingSet=\"${importWorkingSets}\""
  # shellcheck disable=SC2086
  doStartEclipse log -application org.eclipse.ant.core.antRunner -buildfile "${DEVON_IDE_HOME}/scripts/lib_script/import.xml" -data "${WORKSPACE_PATH}"
}

# $1: id
# $2: optional plugin URL (update site)
function doMirrorUpdateSite() {
  local mir_plugin_id="${1}"
  local mir_plugin_url="${2}" #optional Update Site
  if [ -z "${mir_plugin_id}" ]
  then
    doFail "Parameter \"id\" is missing."
  fi
  if [ -z "${mir_plugin_url}" ]
  then
    doLoadPluginProperties "${mir_plugin_id}" # Sets global variables plugin_id and plugin_url
    mir_plugin_url="${plugin_url}"
  fi
  local timestamp
  timestamp=$(date +'%Y-%m-%d')
  doStartEclipse log -application org.eclipse.equinox.p2.metadata.repository.mirrorApplication -source "${mir_plugin_url}" -destination "${DEVON_DOWNLOAD_DIR}/update-sites/${mir_plugin_id}-${timestamp}"
  doStartEclipse log -application org.eclipse.equinox.p2.artifact.repository.mirrorApplication -source "${mir_plugin_url}" -destination "${DEVON_DOWNLOAD_DIR}/update-sites/${mir_plugin_id}-${timestamp}"
  local result
  result="${?}"
  if [ "$?" != 0 ]
  then
    doEchoAttention "Mirroring of the update-site ${mir_plugin_url} failed. Please check the URL or rerun setup (devon eclipse setup)."
  fi
  return "${result}"
}

function doLoadPluginProperties() {
  local file="${1}"
  if [ ! -f "${1}" ]
  then
    file="${SETTINGS_PATH}/eclipse/plugins/${1}.properties"
  fi
  if [ -f "${file}" ] 
  then
    plugin_id=""
    plugin_active="true"
    plugin_url=""
    plugin_mirror_url=""
    doLoadProperties "${file}"
    if [ -z "${plugin_id}" ] || [ -z "${plugin_url}" ]
    then
      doFail "Invalid eclipse plugin config: ${file}"
    fi
  fi
}

# CLI
if [ "${1}" = "-h" ] || [ "${1}" = "help" ]
then
  echo "Manage Eclipse IDE and workspace."
  echo
  echo "Arguments:"
  echo " --all                          if provided as first arg then to command will be invoked for each workspace"
  echo " setup                          setup Eclipse (install or update)"
  echo " add-plugin «id» [«url»] «plugin name» [optional, creates properties file with given name]        install an additional plugin"
  echo " remove-plugin «id»[or .properties filename, if exists]             remove an installed plugin with given id"
  echo " run | start                    launch Eclipse IDE (default if no argument is given)"
  echo " ws-up[date]                    update eclipse workspace"
  echo " ws-re[verse]                   reverse merge changes from workspace into settings"
  echo " ws-reverse-add                 reverse merge adding new properties"
  echo " create-script                  create eclipse-${WORKSPACE} script if not already exists"
  echo " import «path» [«workingsets»]  import projects in «path» into current workspace. «workingsets» comma-separated list of workingsets (no spaces between ,), eg: ./myproject ws1,ws2"
  echo " mirror «id» [«url»]            mirror the content of an update-site"
  exit
fi
if [ -z "${1}" ]
then
  doSetup silent
  doLaunchEclipse
elif [ "${1}" = "setup" ]
then
  doSetup "${2}"
  exit
fi
if [ "${1}" = "--all" ]
then
  shift
  doDevonCommandAllWorkspaces eclipse "${@}"
fi
while [ -n "${1}" ]; do
  if [ "${1}" = "run" ] || [ "${1}" = "start" ]
  then
    doSetup silent
    doLaunchEclipse
  elif [ "${1}" = "ws-up" ] || [ "${1}" = "ws-update" ]
  then
    doConfigureEclipse -u
  elif [ "${1}" = "ws-re" ] || [ "${1}" = "ws-reverse" ]
  then
    doConfigureEclipse -i
  elif [ "${1}" = "ws-reverse-add" ]
  then
    doConfigureEclipse -x
  elif [ "${1}" = "create-script" ]
  then
    doCreateIdeScript eclipse
  elif [ "${1}" = "add-plugin" ]
  then
    shift
    doSetup silent
    doAddPlugin "${@}"
    exit ${?}
  elif [ "${1}" = "remove-plugin" ]
  then
  shift
  doRemovePlugin "${@}"
  exit ${?}
  elif [ "${1}" = "import" ]
  then
    doSetup silent
    doImportEclipse "${2}" "${3}"
    exit ${?}
  elif [ "${1}" = "mirror" ]
  then
    shift
    doSetup silent
    doMirrorUpdateSite "${@}"
    exit ${?}
  else
    doFail "Unknown argument: ${1}"
  fi
  shift
done
