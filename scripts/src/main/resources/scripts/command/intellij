#!/usr/bin/env bash

# autocompletion list
if [ "${1}" = "shortlist" ]
then
  all_opts="ws-update ws-reverse ws-reverse-add create-script"
  if [ -z "${2}" ]
  then
    echo "--all setup version add-plugin run start ${all_opts} help"
  elif [ "${2}" = "--all" ]
  then
    echo "${all_opts}"
  fi
  exit
fi

# shellcheck source=scripts/functions
source "$(dirname "${0}")"/../functions
IDEA_HOME="${DEVON_IDE_HOME}/software/intellij"
if doIsMacOs
then
  # TODO path needs to be fixed...
  TOOL_VERSION_COMMAND="cd '${DEVON_IDE_HOME}/software/macos/intellij'/*.app && head -n 6 'Contents/Resources/product-info.json'"
else
  TOOL_VERSION_COMMAND="head -n 6 '${IDEA_HOME}/product-info.json'"
fi
# shellcheck source=scripts/commandlet-cli
source "$(dirname "${0}")"/../commandlet-cli
cd "${DEVON_IDE_HOME}" || exit 255

function doSetup() {
  doDevonCommand java setup silent
  if [ -z "${INTELLIJ_EDITION}" ] && [ -n "${INTELLIJ_EDITION_TYPE}" ]
  then
    doWarning "You are still using the legacy property INTELLIJ_EDITION_TYPE.\nThe new property name is INTELLIJ_EDITION with values 'ultimate' or 'intellij' as described in the documentation.\nPlease update your devon.properties (what should have happened automatically on update of devonfw-ide scripts)."
    if [ "${INTELLIJ_EDITION_TYPE}" = "U" ]
    then
      INTELLIJ_EDITION="ultimate"
    fi
  fi
  doInstall "intellij" "${INTELLIJ_VERSION}" "${1}" "${INTELLIJ_EDITION}"
  if [ "${?}" = 0 ]
  then
    if  [ -f "${IDEA_HOME}/bin/idea.sh" ]
    then
      ln -s "${IDEA_HOME}/bin/idea.sh" "${IDEA_HOME}/bin/idea"
    fi
    export PATH="${IDEA_HOME}/bin:${PATH}"
    doAddPlugins
  fi
}

function doAddPlugins() {
  local file
  for file in "${SETTINGS_PATH}"/intellij/plugins/*.properties
  do
    if [ -f "${file}" ]
    then
      plugin_url=""
      plugin_id=""
      plugin_active="true"
      doLoadProperties "${file}"
      if [ -z "${plugin_id}" ]
      then
        doWarning "Invalid intellij plugin config: ${file}"
      elif [ "${plugin_active}" = "true" ]
      then
        doAddPlugin "${plugin_id}" "${plugin_url}"
      fi
    fi
  done
}

function doAddPlugin() {
  local pluginId="${1}"
  local pluginUrl="${2}"
  local download_dir="${DEVON_DOWNLOAD_DIR}"
  local intellij_build
  local install_path="${DEVON_IDE_HOME}/plugins/intellij/"
  if [ -e "${IDEA_HOME}/build.txt" ]
  then
    intellij_build="$(cat "${IDEA_HOME}/build.txt")"
  elif [ -e "${IDEA_HOME}/IntelliJ.app/Contents/Resources/build.txt" ]
  then 
    intellij_build="$(cat "${IDEA_HOME}/IntelliJ.app/Contents/Resources/build.txt")"
  fi

  if [ -n "${pluginId}" ] && [ -n "${intellij_build}" ]
  then
    mkdir -p "${install_path}"
    local download_url="${pluginUrl}"
    if [ -z "${pluginUrl}" ]
    then
      download_url="https://plugins.jetbrains.com/pluginManager?action=download&id=${pluginId}&build=${intellij_build}"
    fi
    local filename="intellij-plugin-${intellij_build}-${pluginId}"
    doDownload "${download_url}" "${download_dir}" "${filename}" "" "" "" "" "" "${filename}"
    # test if downloaded file is a valid zip archive...
    if unzip -z "${download_dir}/${filename}" > /dev/null 2>&1
    then
      local extract_path="${DEVON_IDE_HOME}/updates/extracted/${pluginId}"
      doUnzip "${download_dir}/${filename}" "${extract_path}"
      doRunCommand "cp -r '${extract_path}/'* '${install_path}/'"
      doRunCommand "rm -r '${extract_path}/'"
    else
      doRunCommand "cp '${download_dir}/${filename}' '${install_path}/${pluginId}'"
    fi
  else
    doEcho "No plugins to be installed"
  fi
}

function doConfigureIntellij() {
  local mode="${1}"
  if [ ! -d "${WORKSPACE_PATH}/.idea" ]
  then
    if [ -z "${mode}" ]
    then
      mode="-u"
    elif [ "${mode}" != "-u" ]
    then
      doFail "Workspace ${WORKSPACE} is not initialized.\nReverse merge is not possible."
    fi
  fi
  if [ -n "${mode}" ]
  then
    doConfigureWorkspace "${SETTINGS_PATH}/intellij/workspace" "${WORKSPACE_PATH}" "${mode}"
  fi
}

function doStartIntellij() {
  doConfigureIntellij "-u"
  if [ -n "${EXTRA_JAVA_VERSION}" ]
  then
    JAVA_HOME="${DEVON_IDE_HOME}/software/extra/java"
    doExtendPath "${JAVA_HOME}"
  fi
  echo "launching IntelliJ..."
  local IDEA="${IDEA_HOME}/bin/idea64.exe"
  if [ ! -f "${IDEA}" ];
  then
    IDEA="${IDEA_HOME}/bin/idea"
  fi
  if [ ! -f "${IDEA}" ];
  then
    IDEA="${IDEA_HOME}/idea"
  fi
  export IDEA_PROPERTIES="${WORKSPACE_PATH}/idea.properties"
  if doIsMacOs
  then
    echo "MacOs command ${IDEA}"
    if [ "${INTELLIJ_DISABLE_OPEN_WORKSPACE}" = "true" ]
    then
      open "${IDEA}" --args "${@}"
    else
      open -na "${IDEA}" "${WORKSPACE_PATH}" --args "${@}"
    fi

  else
    echo "command ${IDEA}"
    if [ "${INTELLIJ_DISABLE_OPEN_WORKSPACE}" = "true" ]
    then
      "${IDEA}" "${@}" &
    else
      "${IDEA}" "${WORKSPACE_PATH}" "${@}" &
    fi
  fi
}

# CLI
if [ "${1}" = "-h" ] || [ "${1}" = "help" ]
then
  echo "Manage IntelliJ IDE and workspace."
  echo
  echo "Arguments:"
  echo " --all                          if provided as first arg then to command will be invoked for each workspace"
  echo " setup                          setup IntelliJ (install or update)"
  echo " add-plugin «id»                install an additional plugin"
  echo " run | start                    launch IntelliJ IDE (default if no argument is given)"
  echo " ws-up[date]                    update IntelliJ workspace"
  echo " ws-re[verse]                   reverse merge changes from workspace into settings"
  echo " ws-reverse-add                 reverse merge adding new properties"
  echo " create-script                  create intellij-${WORKSPACE} script if not already exists"
  exit
fi
if [ -z "${1}" ]
then
  doSetup silent
  doStartIntellij
elif [ "${1}" = "setup" ]
then
  doSetup "${2}"
  exit
fi
if [ "${1}" = "--all" ]
then
  shift
  doDevonCommandAllWorkspaces intellij "${@}"
fi
while [ -n "${1}" ]
do
  if [ "${1}" = "run" ] || [ "${1}" = "start" ]
  then
    doSetup silent
    shift
    doStartIntellij "${@}"
  elif [ "${1}" = "ws-up" ] || [ "${1}" = "ws-update" ]
  then
    doConfigureIntellij "-u"
  elif [ "${1}" = "ws-re" ] || [ "${1}" = "ws-reverse" ]
  then
    doConfigureIntellij "-i"
  elif [ "${1}" = "ws-reverse-add" ]
  then
    doConfigureIntellij "-x"
  elif [ "${1}" = "create-script" ]
  then
    doCreateIdeScript intellij
  elif [ "${1}" = "add-plugin" ]
  then
    shift
    doAddPlugin "${@}"
  else
    doFail "Unknown argument: ${1}"
  fi
  shift
done
