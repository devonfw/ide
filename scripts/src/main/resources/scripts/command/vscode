#!/usr/bin/env bash

# autocompletion list
if [ "${1}" = "shortlist" ]
then
  all_opts="ws-update ws-reverse ws-reverse-add create-script"
  if [ -z "${2}" ]
  then
    echo "--all setup version add-plugin run start ${all_opts} help"
  elif [ "${2}" = "--all" ]
  then
    echo "${all_opts}"
  fi
  exit
fi

# shellcheck source=scripts/functions
source "$(dirname "${0}")"/../functions
VSCODE_HOME="${DEVON_IDE_HOME}/software/vscode"
TOOL_VERSION_COMMAND="code -v"
# shellcheck source=scripts/commandlet-cli
source "$(dirname "${0}")"/../commandlet-cli

cd "${DEVON_IDE_HOME}" || exit 255

function doSetup() {
  doInstall "vscode" "${VSCODE_VERSION}" "${1}"
  if [ "${?}" = 0 ]
  then
    cleanupPlugins
    doAddPlugins
  fi
}

function cleanupPlugins() {
  clean_plugins_on_update="false"
  doLoadProperties "${SETTINGS_PATH}"/vscode/vscode.properties

  if [ "${clean_plugins_on_update}" = "true" ]
  then
    doEcho "Cleaning up all extensions"
    doRunCommand "rm -Rf ${DEVON_IDE_HOME}/plugins/vscode/*"
  else
    doEcho "vsCode extensions not configured to be removed on update. If you would like to do so, please create ${SETTINGS_PATH}/vscode/vscode.properties with clean_plugins_on_update=true."
  fi
}

function doAddPlugins() {
  local file
  local pluginsToInstall=()
  local pluginsToRecommend=()
  for file in "${SETTINGS_PATH}"/vscode/plugins/*.properties
  do
    if [ -f "${file}" ]
    then
      plugin_id=""
      plugin_active="true"
      doLoadProperties "${file}"
      if [ -z "${plugin_id}" ]
      then
        doWarning "Invalid vscode plugin config: ${file}"
      elif [ "${plugin_active}" = "true" ]
      then
        pluginsToInstall+=("${plugin_id}")
      elif [ "${plugin_active}" = "false" ]
      then
        pluginsToRecommend+=("\"${plugin_id}\"")
      fi
    fi
  done
  # install vscode plugins
  if [ "${#pluginsToInstall}" -gt 0 ]
  then
    doAddPlugin "${pluginsToInstall[@]}"
  fi
  # set vscode recommendations
  if [ "${#pluginsToRecommend}" -gt 0 ]
  then
    local IFS=, 
    doAddRecommendations "${pluginsToRecommend[@]}"
  fi
}

function doAddPlugin() {
  local plugins="${*}"
  local args=()
  while [ -n "${1}" ]
  do
    args+=("--install-extension" "${1}")
    shift
  done
  if [ "${#args}" = 0 ]
  then
    doEcho "No plugins to be installed / uninstalled"
  else
    doEchoAttention "Starting installation of the following plugins into VS code:\n${plugins}\nPlease wait until VSCode has successfully installed all plugins."
    doRunVsCode --force "${args[@]}"
  fi
}

function doConfigureVsCode() {
  local mode="${1}"
  if [ ! -d "${WORKSPACE_PATH}/.vscode" ]
  then
    if [ "${mode}" = "-i" ] || [ "${mode}" = "-x" ]
    then
      doFail "Workspace ${WORKSPACE} is not initialized.\nReverse merge is not possible."
    fi
    mode="-u"
  fi
  if [ -n "${mode}" ]
  then
    doConfigureWorkspace "${SETTINGS_PATH}/vscode/workspace" "${WORKSPACE_PATH}" "${mode}"
  fi
}

function doRunVsCode() {
  local VSCODE_CONF="${WORKSPACE_PATH}/.vscode/.userdata"
  if [ ! -d "${VSCODE_CONF}" ]
  then
    if [ -d "${DEVON_IDE_HOME}/conf/vscode" ]
    then
      doEcho "Migrating ${DEVON_IDE_HOME}/conf/vscode to ${VSCODE_CONF}\nFor details see https://github.com/devonfw/ide/issues/553"
      cp -a "${DEVON_IDE_HOME}/conf/vscode" "${VSCODE_CONF}"
    else
      mkdir -p "${VSCODE_CONF}"
    fi
  fi
  local VSCODE_EXT="${DEVON_IDE_HOME}/plugins/vscode"
  mkdir -p "${VSCODE_EXT}"
  doRunCommand "'${VSCODE_HOME}/bin/code' --new-window --user-data-dir '${VSCODE_CONF}' --extensions-dir '${VSCODE_EXT}' ${*}"
}

function doStartVsCode() {
  doConfigureVsCode -u
  doEcho "launching VSCode..."
  doRunVsCode "${WORKSPACE_PATH}"
}

function doAddRecommendations() {
  local recommendations="${*}"
  local extensionsJSON="${WORKSPACE_PATH}/.vscode/extensions.json"
  local key="\"recommendations\": [$recommendations]"
  if [ -f "${extensionsJSON}" ] && [ ! -s "${extensionsJSON}" ]
  then 
    if grep -q "\"recommendations\":" "${extensionsJSON}"
    then
      if ! grep -Fq "${key}" "${extensionsJSON}"
      then
        # if recommendations key is already in extensions.JSON
        sed -i "s/\"recommendations\": \[[^]]*\]/${key}/g" "${extensionsJSON}"
        doSuccess "Plugin recommendations have been updated in ${extensionsJSON}."
      fi
    else
      # if recommendations key is not in extensions.JSON but file exists
      sed -i 's/^{/{ '"${key}"', /' "${extensionsJSON}"
      doSuccess "Plugin recommendations have been added in ${extensionsJSON}."
    fi
  else
    # if extensions.JSON does not exist
    echo "{${key}}" > "${extensionsJSON}"
    doSuccess "Plugin recommendations have been created in ${extensionsJSON}"
  fi
}
  
# CLI
if [ "${1}" = "-h" ] || [ "${1}" = "help" ]
then
  echo "Launch Visual Studio Code and/or manage VSCode workspace."
  echo
  echo "Arguments:"
  echo " --all                          if provided as first arg then to command will be invoked for each workspace"
  echo " setup                          setup VSCode (install or update)"
  echo " add-plugin «id»                install an additional plugin (extension)"
  echo " run | start                    launch VSCode IDE (default if no argument is given)"
  echo " ws-up[date]                    update VSCode workspace"
  echo " ws-re[verse]                   reverse merge changes from workspace into settings"
  echo " ws-reverse-add                 reverse merge adding new properties"
  echo " create-script                  create vscode-${WORKSPACE} script if not already exists"
  exit
fi
if [ -z "${1}" ]
then
  doSetup
  doStartVsCode
elif [ "${1}" = "setup" ]
then
  doSetup "${2}"
  exit
fi
if [ "${1}" = "--all" ]
then
  shift
  doDevonCommandAllWorkspaces vscode "${@}"
fi
while [ -n "${1}" ]
do
  if [ "${1}" = "run" ] || [ "${1}" = "start" ]
  then
    shift
    doSetup silent
    doStartVsCode "${@}"
  elif [ "${1}" = "ws-up" ] || [ "${1}" = "ws-update" ]
  then
    doConfigureVsCode -u
  elif [ "${1}" = "ws-re" ] || [ "${1}" = "ws-reverse" ]
  then
    doConfigureVsCode -i
  elif [ "${1}" = "ws-reverse-add" ]
  then
    doConfigureVsCode -x
  elif [ "${1}" = "create-script" ]
  then
    doCreateIdeScript vscode
  elif [ "${1}" = "add-plugin" ]
  then
    shift
    doAddPlugin "${@}"
    exit ${?}
  else
    doFail "Undefined argument: ${1}"
  fi
  shift
done
