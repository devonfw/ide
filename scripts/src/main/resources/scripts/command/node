#!/usr/bin/env bash

# autocompletion list
if [ "${1}" = "shortlist" ]
then
  if [ -z "${2}" ]
  then
    echo "setup version create generate db help"
  fi
  exit
fi

# shellcheck source=scripts/functions
source "$(dirname "${0}")"/../functions
NODE_HOME="${DEVON_IDE_HOME}/software/node"
TOOL_VERSION_COMMAND="node -v"
# shellcheck source=scripts/commandlet-cli
source "$(dirname "${0}")"/../commandlet-cli

# $1: optional setup
function doSetup() {
  doInstall "node" "${NODE_VERSION}" "${1}" "" "${NODE_HOME}"
  return 0
}

function doSetupDevon4node() {
  if ! command -v devon4node &> /dev/null
  then
    doDevonCommand yarn setup silent
    doDevonCommand npm install -g @devon4node/cli@latest
  fi
}

function doRun() {
  doSetup silent
  doEcho "Running: node ${*}"
  if doIsQuiet
  then
    node "${@}" > /dev/null
  else
    node "${@}"
  fi
}

#CLI
case ${1} in 
"help" | "-h")
  echo "Setup or run NodeJS."
  echo
  echo "Arguments:"
  echo " setup                          setup NodeJS (install and verify)"
  echo " create «name» [«args»]         create a new devon4node application (same as devon4node new)"
  echo " generate «s» [«args»]          generate devon4node components using the schematic «s» (same as devon4node generate)"
  echo " db «c» [«args»]                execute a TypeORM command «c» (same as devon4node db)"
  echo " «args»                         call NodeJS with the specified arguments"
  exit
;;
"setup" | "s")
  doSetup "${2}"
;;
"create" | "c")
  shift
  doSetupDevon4node
  devon4node new "${@}"
;;
"generate" | "g")
  doSetupDevon4node
  devon4node "${@}"
;;
"db")
  doSetupDevon4node
  devon4node "${@}"
;;
*)
  doRun "${@}"
;;
esac
