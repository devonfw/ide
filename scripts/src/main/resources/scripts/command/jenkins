#!/usr/bin/env bash

# autocompletion list
if [ "${1}" = "shortlist" ]
then
  if [ -z "${2}" ]
  then
    echo "setup start stop add remove help"
  fi
  exit
fi

# shellcheck source=scripts/functions
source "$(dirname "${0}")"/../functions
JENKINS_CLI_HOME="${DEVON_IDE_HOME}/software/jenkins"
JENKINS_COMMAND="java -Duser.home=${JENKINS_HOME} -jar '${JENKINS_CLI_HOME}/jenkins.war'"
TOOL_VERSION_COMMAND="${JENKINS_COMMAND} --version"
# shellcheck source=scripts/commandlet-cli
source "$(dirname "${0}")"/../commandlet-cli

# $1: optional setup
function doSetup() {
  doDevonCommand java setup silent
  if [ -d "${JENKINS_CLI_HOME}" ]
  then
    if [ "${1}" != "silent" ]
    then
      echo "Jenkins is already installed at ${JENKINS_CLI_HOME}"
    fi
  else
    if [ ! -d "${JENKINS_HOME}" ]
    then
      doRunCommand "mkdir '${JENKINS_HOME}'"
    fi
    # shellcheck disable=SC2034
    TOOL_VERSION_COMMAND="-"
    doInstall "jenkins" "${JENKINS_VERSION}" "" "" "" "" "noUnpack" "" "" "jenkins.war"
    local cwd="${PWD}"
    cd "${JENKINS_CLI_HOME}" || exit 255
    local version=${JENKINS_VERSION}
    if [ -z "${JENKINS_VERSION}" ]
    then
      version="$(doGetLatestSoftwareVersion "jenkins")"
    fi
    doRunCommand "jar xf jenkins.war WEB-INF/lib/cli-${version}.jar"
    doRunCommand "mv 'WEB-INF/lib/cli-${version}.jar' 'jenkins-cli.jar'"
    doRunCommand "rm -rf WEB-INF/"
    cd "${cwd}" || exit 255
  fi
  if [ "${1}" != "silent" ] && ! doIsQuiet
  then
    doRunCommand "${JENKINS_COMMAND} --version" "verify installation of Jenkins"
  fi
}

function doStart() {
  doSetup silent
  doRunCommand "${JENKINS_COMMAND} --httpPort=${JENKINS_PORT:-9999} ${JENKINS_OPTS} || echo -e 'Jenkins could not be started.\nIf you see \"Address already in use\" error above this only means it was already running.' &"
  sleep 15
  echo
  echo "Jenkins is running on http://localhost:${JENKINS_PORT:-9999}"
}

function doJenkinsCli() {
  local admin_password="admin"
  if [ -f "${JENKINS_HOME}/secrets/initialAdminPassword" ]
  then
    admin_password="$(cat "${JENKINS_HOME}"/secrets/initialAdminPassword)"
  fi
  local auth_file="${JENKINS_HOME}/auth_file"
  echo "admin:${admin_password}" > "${JENKINS_HOME}/auth_file"
  local jenkins_cli_command="java -Duser.home=${JENKINS_HOME} -jar '${JENKINS_CLI_HOME}/jenkins-cli.jar'"
  echo "${jenkins_cli_command}" -s "http://localhost:${JENKINS_PORT:-9999}" -auth "@${auth_file}" "${@}"
  # shellcheck disable=SC2145
  doRunCommand "${jenkins_cli_command} -s 'http://localhost:${JENKINS_PORT:-9999}' -auth '@${auth_file}' ${@}"
}

function doStop() {
  doJenkinsCli shutdown
}

# shellcheck disable=SC2120
function doAdd() {
  if [ ! -d .git ]
  then
    doFail "Not in a top-level git project!"
  fi
  local JENKINSFILE="${1:-Jenkinsfile}"
  if [ ! -f "${JENKINSFILE}" ]
  then
    doFail "Could not find Jenkinsfile (${JENKINSFILE})."
  fi
  sed "s~@GIT@~file://${PWD}~" "${DEVON_IDE_HOME}/scripts/templates/jenkins/project.xml" | sed "s~@UUID@~$(head -c 20 /dev/random | base64)~" | java -jar "${JENKINS_CLI_HOME}/jenkins-cli.jar" -s "http://localhost:${JENKINS_PORT:-9999}" -auth "${JENKINS_ADMIN_LOGIN:-admin}:${JENKINS_ADMIN_PASSWORD:-admin}" create-job "$(basename "${PWD}")"
}

function doRemove() {
  doJenkinsCli delete-job "$(basename "${PWD}")"
}

# CLI
if [ "${1}" = "-h" ] || [ "${1}" = "help" ]
then
  echo "Setup or run Jenkins CI build server on local machine."
  echo
  echo "Arguments:"
  echo " start                          start local Jenkins server"
  echo " stop                           stop local Jenkins server"
  echo " setup                          setup Jenkins (install, verify, configure)"
  echo " add                            add CI job for current project to Jenkins"
  echo " remove                         remove CI job for current project from Jenkins"
elif [ "${1}" = "setup" ]
then
  doSetup "${2}"
elif [ "${1}" = "start" ] || [ -z "${1}" ]
then
  doStart
elif [ "${1}" = "stop" ]
then
  doStop
elif [ "${1}" = "add" ]
then
  shift
  doAdd "${@}"
elif [ "${1}" = "remove" ]
then
  doRemove
else
  doFail "undefined argument ${*}"
fi
