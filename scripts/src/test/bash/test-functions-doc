#!/bin/bash

SCRIPTS_PATH="../../../../scripts/src/main/resources/scripts"
TEST_PATH="../../../../scripts/src/test/bash"
(
  set -o pipefail
  grep "function " "${SCRIPTS_PATH}/functions" "${SCRIPTS_PATH}/functions-core" | sed 's/.*function //' | sed 's/() {//' | sort -u >functions.list
) || exit 1
(
  set -o pipefail
  grep "=== " "../../../../documentation/functions.asciidoc" | sed 's/=== //' | sort -u >functions.adoc.list
) || exit 1

diff functions.list functions.adoc.list
if [ "$?" = 0 ]; then
  echo "Documentation of functions and function declarations are in sync."
  echo "Awesome!"
else
  echo "Documentation of functions does not match function declarations!"
  echo "Please keep function documentation and declarations in sync!"
  exit 1
fi

#For every file in SCRIPTS_PATH/command and SCRIPTS_PATH/function and SCRIPTS_PATH/function-core, check for functions that follow the pattern do[A-Z][a-zA-Z]*. 
#Then check if there is a corresponding function declared in the same file or in functions.list file
#which contains every function declared in functions and functions-core files.

for file in "$SCRIPTS_PATH"/command/* "$SCRIPTS_PATH/functions" "$SCRIPTS_PATH/functions-core"; do
  (
    set -o pipefail
    grep -o -E "do[A-Z][a-zA-Z]*" "$file" | sort | uniq |
      while read -r functionName; do
        if ! grep -q "function $functionName" "$file" && ! grep -q "$functionName" "$TEST_PATH/functions.list"; then
          echo "Function $functionName is neither declared in $file nor in Devon Functions Files!"
        fi
      done
  ) || exit 1
done
